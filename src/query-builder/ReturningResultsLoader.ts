import {ObjectLiteral} from "../common/ObjectLiteral";
import {QueryRunner} from "../query-runner/QueryRunner";
import {OrmUtils} from "../util/OrmUtils";
import {QueryExpressionMap} from "./QueryExpressionMap";
import {ColumnMetadata} from "../metadata/ColumnMetadata";

/**
 * Extracts
 */
export class ReturningResultsLoader {

    // -------------------------------------------------------------------------
    // Constructor
    // -------------------------------------------------------------------------

    constructor(protected queryRunner: QueryRunner,
                protected expressionMap: QueryExpressionMap,
                protected returningColumns: ColumnMetadata[]) {
    }

    // -------------------------------------------------------------------------
    // Public Methods
    // -------------------------------------------------------------------------

    async load(valueSets: ObjectLiteral[], raw: ObjectLiteral[]): Promise<[ObjectLiteral[], ObjectLiteral[]]> {
        const identifiers: ObjectLiteral[] = [];
        const generatedMaps: ObjectLiteral[] = [];

        const metadata = this.expressionMap.mainAlias!.metadata;
        await Promise.all(valueSets.map(async (valueSet, valueSetIndex) => {
            const generatedMap = this.queryRunner.connection.driver.createGeneratedMap(metadata, raw) || {};

            metadata.generatedColumns.forEach(generatedColumn => {
                if (generatedColumn.generationStrategy === "uuid") {
                    // uuid can be defined by user in a model, that's why first we get it
                    let uuid = generatedColumn.getEntityValue(valueSet);
                    if (!uuid) // if it was not defined by a user then InsertQueryBuilder generates it by its own, get this generated uuid value
                        uuid = this.expressionMap.parameters["_uuid_" + generatedColumn.databaseName + valueSetIndex];

                    OrmUtils.mergeDeep(generatedMap, generatedColumn.createValueMap(uuid));
                }
            });

            this.queryRunner.manager.merge(metadata.target, valueSet, generatedMap);
            const identifier = metadata.getEntityIdMap(valueSet);

            if (!identifier)
                throw new Error(`Inserted entity identifier is empty, cannot finish insert operation execution.`);

            // for postgres and mssql we use returning/output statement to get values of inserted default and generated values
            // for other drivers we have to re-select this data from the database
            if (this.returningColumns.length && !this.queryRunner.connection.driver.isReturningSqlSupported()) {

                // to select just inserted entity we need a criteria to select by.
                // for newly inserted entities in drivers which do not support returning statement
                // row identifier can only be an increment column
                // (since its the only thing that can be generated by those databases)
                // or (and) other primary key which is defined by a user and inserted value has it

                const returningResult: any = await this.queryRunner.manager
                    .createQueryBuilder()
                    .select(metadata.primaryColumns.map(column => metadata.targetName + "." + column.propertyPath))
                    .addSelect(this.returningColumns.map(column => metadata.targetName + "." + column.propertyPath)) // todo: check why they aren't getting escaped
                    .from(metadata.target, metadata.targetName)
                    .where(identifier)
                    .getOne();

                this.queryRunner.manager.merge(metadata.target, valueSet, returningResult);
                this.queryRunner.manager.merge(metadata.target, generatedMap, returningResult);
            }

            identifiers.push(identifier);
            generatedMaps.push(generatedMap);
        }));
        return [identifiers, generatedMaps];
    }

}